<snippet>
	<content><![CDATA[
class SegmentTree {
private:
    vector<int> a;
    vector<int> t;
    int left_index;
    int right_index;


    void build(int v, int tl, int tr) {
        if (tl == tr) {
            t[v] = a[tl];
        } else {
            int tm = (tl + tr) / 2;
            build(v * 2, tl, tm);
            build(v * 2 + 1, tm + 1, tr);
            t[v] = t[v * 2] + t[v * 2 + 1];
        }
    }

    int doQuery(int v, int tl, int tr, int l, int r) {
        if (l > r) {
            return 0;
        }

        if (l == tl && r == tr) {
            return t[v];
        }

        int tm = (tl + tr) / 2;

        return doQuery(v * 2, tl, tm, l, min(r, tm)) + doQuery(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
    }

    void doUpdate(int v, int tl, int tr, int pos, int new_val) {
        if (tl == tr) {
            t[v] = new_val;
        } else {
            int tm = (tl + tr) / 2;

            if (pos <= tm)
                doUpdate(v * 2, tl, tm, pos, new_val);
            else
                doUpdate(v * 2 + 1, tm + 1, tr, pos, new_val);

            t[v] = t[v * 2] + t[v * 2 + 1];
        }
    }

public:

    SegmentTree() {};

    SegmentTree(vector<int> &arr) {
        int n = arr.size();
        a = arr;
        t = vector<int>(4 * n + 5, 0);
        left_index = 0, right_index = n - 1;
        build(1, left_index, right_index);
    }

    int query(int l, int r) {
        return doQuery(1, left_index, right_index, l, r);
    }

    void update(int pos, int val) {
        doUpdate(1, left_index, right_index, pos, val);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
